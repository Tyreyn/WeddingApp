@page "/"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using WeddingApp.Controllers
@using WeddingApp.Entities
@inject CustomAuthState CustomAuthState
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SqlServerDataController SqlServerDataController
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@attribute [AllowAnonymous]
@rendermode @(new InteractiveServerRenderMode(false))

<h3>User name: @CustomAuthState.CurrentUserEntity.UserName User phone: @CustomAuthState.CurrentUserEntity.UserPhone</h3>

@if (CustomAuthState.CurrentUserEntity.UserName == null)
{
    <p>Wczytywanie danych</p>
}
else
{
    @if (CustomAuthState.CurrentUserEntity.UserName == string.Empty)
    {
        <Login SignIn="@SignIn" LoginMessage="@LoginMessage" />
        <p>NOT HELLO, @CustomAuthState.CurrentUserEntity.UserName!</p>
    }
    else
    {
        <Gallery />
    }
}


@code {
    private Tuple<bool, string> LoginMessage;
    public bool connection;
    protected override async Task OnInitializedAsync()
    {
        await LoadStateAsync();
        StateHasChanged();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (CustomAuthState.CurrentUserEntity.UserName == null)
        {
            CustomAuthState.CurrentUserEntity.UserName = string.Empty;
            StateHasChanged();
        }
        return Task.FromResult(true);
    }

    private async Task LoadStateAsync()
    {
        CustomAuthState.CurrentUserClaims = new ClaimsPrincipal();
        CustomAuthState.CurrentUserEntity = new UserEntity();
        await ((CustomAuthStateProviderController)AuthenticationStateProvider).GetCurrentUserAsync();
        await ((CustomAuthStateProviderController)AuthenticationStateProvider).GetAuthenticationStateAsync();
    }

    private async void SignIn(UserEntity userEntityModel)
    {
        LoginMessage = await ((CustomAuthStateProviderController)AuthenticationStateProvider)
            .AuthenticateUser(userEntityModel.UserName, userEntityModel.UserPhone);
        StateHasChanged();
    }
}