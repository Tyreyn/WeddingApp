@page "/"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using MudExtensions
@using MudExtensions.Enums
@using WeddingApp.Controllers
@using WeddingApp.Data.Entities
@using WeddingAppDTO.DataTransferObject
@inject CustomAuthState CustomAuthState
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@attribute [AllowAnonymous]
@rendermode @(new InteractiveServerRenderMode(false))

<MudContainer MaxWidth="MaxWidth.Large" Style="object-fit: contain;">
    @if (!pauseAnimation)
    {
        <MudAnimate @ref="mudAnimate"
                    Selector=".loginClass"
                    Duration="1"
                    AnimationType="AnimationType.Blur"
                    Value="100"
                    ValueSecondary="0"
                    Delay="0"
                    IterationCount="1"
                    AnimationTiming="AnimationTiming.Linear"
                    AnimationDirection="AnimationDirection.Reverse"
                    AnimationFillMode="AnimationFillMode.Both" />
    }

    @if (CustomAuthState.CurrentUserEntity.UserName == null)
    {
        <div Style="align-content: center; padding-top: 20%; padding-left: 50%">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
        </div>
    }
    else
    {
        @if (CustomAuthState.CurrentUserEntity.UserName == string.Empty)
        {
            <MudStack Wrap="Wrap.Wrap"
                      Class="loginClass align-content-center"
                      Spacing="12"
                      Justify="Justify.Center"
                      AlignItems="AlignItems.Center"
                      Style="padding-top: 10%;">
                <Login SignIn="@SignIn" LoginMessage="@LoginMessage" MudAnimate="@mudAnimate" />
                <iframe src="https://www.google.com/maps/d/u/0/embed?mid=1XSll0BtKNvOkcCiFOVeVuyzfa_2kLf0&ehbc=2E312F&noprof=1" frameborder="0" style="border:0; display:block margin:0 auto;" allowfullscreen />
            </MudStack>
        }
        else
        {
            <MudPaper Style="background-color: rgba(255,193,173,0.4)">
                <Gallery />
            </MudPaper>
        }
    }
</MudContainer>

<style>

    iframe, .maps {
        width: 100vw;
        height: 100vw;
        max-width: 800px;
        max-height: 600px;
    }

    .centered-paper {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100%;
        width: 100%;
    }

    html, body {
        background-image: url(@backgroundPath);
        background-repeat: space;
        background-attachment: fixed;
        background-position: 0% 0%;
        background-size: cover;
    }
</style>

@code {

    private string backgroundPath;
    MudAnimate mudAnimate;
    private Tuple<bool, string> LoginMessage;
    public bool connection;
    private bool pauseAnimation = false;
    protected override async Task OnInitializedAsync()
    {
        await LoadStateAsync();
        StateHasChanged();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        this.CheckAndCheckBackgroundPath();

        if (CustomAuthState.CurrentUserEntity.UserName == null)
        {
            CustomAuthState.CurrentUserEntity.UserName = string.Empty;
            StateHasChanged();
        }
        return Task.FromResult(true);
    }

    private async Task LoadStateAsync()
    {
        CustomAuthState.CurrentUserClaims = new ClaimsPrincipal();
        CustomAuthState.CurrentUserEntity = new UserDto { UserName = null, UserPhone = null };
        await ((CustomAuthStateProviderController)AuthenticationStateProvider).GetCurrentUserAsync();
        await ((CustomAuthStateProviderController)AuthenticationStateProvider).GetAuthenticationStateAsync();
    }

    private async void SignIn(UserDto userEntityModel)
    {
        pauseAnimation = true;
        LoginMessage = await ((CustomAuthStateProviderController)AuthenticationStateProvider)
            .AuthenticateUser(userEntityModel.UserName, userEntityModel.UserPhone);
        StateHasChanged();
    }

    private async void CheckAndCheckBackgroundPath()
    {
        if (CustomAuthState.CurrentUserEntity.UserName == null
            || CustomAuthState.CurrentUserEntity.UserName == string.Empty)
        {
            string newBackgroundPath = "../../wwwroot/login_background.png";
            if (backgroundPath == newBackgroundPath) return;
            backgroundPath = newBackgroundPath;
            StateHasChanged();
        }
        else
        {
            string newBackgroundPath = "../../wwwroot/gallery_background.jpg";
            if (backgroundPath == newBackgroundPath) return;
            backgroundPath = newBackgroundPath;
            StateHasChanged();
        }
    }
}