@page "/"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using WeddingApp.Controllers
@using WeddingApp.Entities
@inject CustomAuthState CustomAuthState
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SqlServerDataController SqlServerDataController
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@attribute [AllowAnonymous]
@rendermode @(new InteractiveServerRenderMode(false))

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
    @if (CustomAuthState.CurrentUserEntity.UserName == null)
    {
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    }
    else
    {
        @if (CustomAuthState.CurrentUserEntity.UserName == string.Empty)
        {
            //<MudPaper Outlined="false" Class="centered-paper ma-48">
            <MudStack Wrap="Wrap.Wrap" Spacing="12" Justify="Justify.Center" AlignItems="AlignItems.Center" Style="padding-top: 10%;">
                <Login SignIn="@SignIn" LoginMessage="@LoginMessage" />
            </MudStack>
            //</MudPaper>
        }
        else
        {
            <MudPaper>
                <Gallery />
            </MudPaper>
        }
    }
</MudContainer>

<style>
    .centered-paper {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100%;
        width: 100%;
    }
</style>
@code {
    private Tuple<bool, string> LoginMessage;
    public bool connection;
    protected override async Task OnInitializedAsync()
    {
        await LoadStateAsync();
        StateHasChanged();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (CustomAuthState.CurrentUserEntity.UserName == null)
        {
            CustomAuthState.CurrentUserEntity.UserName = string.Empty;
            StateHasChanged();
        }
        return Task.FromResult(true);
    }

    private async Task LoadStateAsync()
    {
        CustomAuthState.CurrentUserClaims = new ClaimsPrincipal();
        CustomAuthState.CurrentUserEntity = new UserEntity();
        await ((CustomAuthStateProviderController)AuthenticationStateProvider).GetCurrentUserAsync();
        await ((CustomAuthStateProviderController)AuthenticationStateProvider).GetAuthenticationStateAsync();
    }

    private async void SignIn(UserEntity userEntityModel)
    {
        LoginMessage = await ((CustomAuthStateProviderController)AuthenticationStateProvider)
            .AuthenticateUser(userEntityModel.UserName, userEntityModel.UserPhone);
        StateHasChanged();
    }
}