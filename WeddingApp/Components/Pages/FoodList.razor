@using WeddingApp.Data.Entities
@using WeddingAppBL.Repository
@using WeddingAppDTO.DataTransferObject
@inject FoodRepository FoodRepository

<MudDataGrid T="Food" @ref="dataGrid" Items="@Foods" ReadOnly="@IsAdmin" EditMode="DataGridEditMode.Form" Style="background-color:rgba(242, 191, 174, 0.4);"
             CommittedItemChanges="@ItemHasBeenCommitted" GroupExpanded="true" Filterable="false" SortMode="@SortMode.None" Groupable="true"
             Virtualize="true" Height="40vh" EditTrigger="DataGridEditTrigger.Manual" GroupClassFunc="GroupClassFunc">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Jedzenie</MudText>
        <MudSpacer />
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Id" Hidden="@IsAdmin" />
        <PropertyColumn Property="x => x.Type" Hidden="@IsAdmin" />
        <PropertyColumn Property="x => x.Name"
                        Title="" Grouping="true"
                        CellStyle="justify-content:center;text-align: center !important;"
                        GroupBy="x => x.Type" />
        <TemplateColumn Hidden="@IsAdmin" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteFood(context.Item.Id))" />
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
            </CellTemplate>
        </TemplateColumn>

    </Columns>
</MudDataGrid>

<style>
    .test {
        background-color: rgba(246, 174, 150, 0.6) !important;
        justify-content: center !important;
        text-align: center;
    }
</style>
@code {

    [Parameter]
    public bool IsAdmin { get; set; }

    private MudDataGrid<Food> dataGrid;

    public static IEnumerable<Food> Foods { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.IsAdmin = !this.IsAdmin;
        dataGrid?.ExpandAllGroups();
        Foods = FoodRepository.GetFoods().Result.ToList();
    }

    Func<Food, object> _groupBy = x =>
    {
        return x.Type;
    };

    private string GroupClassFunc(GroupDefinition<Food> item)
    {
        return "test";
    }

    private void ItemHasBeenCommitted(object element)
    {
        FoodRepository.EditFood((Food)element);
        Foods = FoodRepository.GetFoods().Result.ToList();
        StateHasChanged();
    }

    private void DeleteFood(int id)
    {
        FoodRepository.DeleteFood(id);
        Foods = FoodRepository.GetFoods().Result.ToList();
        StateHasChanged();
    }
}