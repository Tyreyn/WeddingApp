@using Microsoft.Extensions.Logging
@inject IWebHostEnvironment Environment
@using System.Net.Http.Headers
@using System.Text.Json
@using MudExtensions
@using WeddingApp.Components.Elements
@using WeddingApp.Controllers
@using WeddingApp.Data.Entities
@using WeddingAppDTO.DataTransferObject
@inject IHttpClientFactory ClientFactory
@inject FilesController FilesController
@inject CustomAuthState CustomAuthState

<MudAppBar Style="background-image: radial-gradient(circle, rgba(255, 213, 211, 1) 0%, rgba(255, 177, 151, 1) 29%, rgba(252, 166, 141, 0.8) 58%, rgba(255, 220, 211, 1) 100%); background-color:transparent"
           Class="deeporange lighten-4">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>" Context="fileInput" FilesChanged="OnInputFileChange" Accept="image/*">
        <ButtonTemplate>
            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Class="deeporange accent-3 mud-elevation-25 rounded"
                       Style="color: rgba(85,65,50,0.9)"
                       StartIcon="@Icons.Material.Filled.PhotoCamera"
                       for="@fileInput.Id">
                Dodaj zdjęcie
            </MudButton>
        </ButtonTemplate>
    </MudFileUpload>
    @if (isLoading)
    {
        <MudProgressLinear Color="Color.Secondary" Striped="true" Value="@(Convert.ToDouble(progressPercent)*100)" Class="my-7">
            <MudText Typo="Typo.subtitle1" Color="Color.Dark">
                <b>@(Convert.ToDouble(progressPercent) * 100)%</b>
            </MudText>
        </MudProgressLinear>
    }
</MudAppBar>


<MudStack Row="true" Wrap="Wrap.Wrap" Spacing="1" Justify="Justify.Center" AlignItems="AlignItems.Center">
    @foreach (PictureDto picture in pictures)
    {
        <Picture pictureEntity="picture" CurrentUserID="CustomAuthState.CurrentUserEntity.UserID" DeletePicture="@DeletePicture" />
    }
</MudStack>

<style>
    html, body {
        background-image: url("../../wwwroot/gallery_background.png");
        background-repeat: space;
        background-attachment: fixed;
        background-position: 0% 0%;
        background-size: cover;
    }
</style>


@code {
    public List<PictureDto> pictures = new();
    MudGallery? _gallery;
    private bool isLoading;
    private bool shouldRender;
    public int readbytes;
    private decimal progressPercent;
    public string uploadDirectory;
    public string statusMessage;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            pictures = FilesController.LoadFiles().Result;
            StateHasChanged();
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnInputFileChange(IReadOnlyList<IBrowserFile> inputFileChangeEventArgs)
    {
        isLoading = true;
        FilesController.OnStateChange += UploadingPictureProgress;
        await FilesController.UploadFiles(
            inputFileChangeEventArgs,
            CustomAuthState.CurrentUserEntity.UserID);
        FilesController.OnStateChange -= UploadingPictureProgress;
        isLoading = false;
        pictures = FilesController.LoadFiles().Result;
        StateHasChanged();
    }

    private async void UploadingPictureProgress(decimal progressPercent)
    {
        this.progressPercent = progressPercent;
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task DeletePicture(string pathToPicture)
    {
        await FilesController.DeletePicture(pathToPicture);
        pictures = FilesController.LoadFiles().Result;
        StateHasChanged();
    }
}
