@using WeddingApp.Controllers
@using WeddingAppDTO.DataTransferObject
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject CustomAuthState CustomAuthState
@inject AuthenticationStateProvider AuthenticationStateProvider
@page "/admin"
@rendermode @(new InteractiveServerRenderMode(false))

<MudContainer MaxWidth="MaxWidth.Large" Style="object-fit: contain;">

    @if (CustomAuthState.CurrentUserEntity.UserName == null)
    {
        <div Style="align-content: center; padding-top: 20%; padding-left: 50%">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
        </div>
    }
    else
    {
        @if (CustomAuthState.CurrentUserEntity.UserName == string.Empty)
        {
            <MudStack Wrap="Wrap.Wrap"
                      Class="loginClass align-content-center"
                      Spacing="12"
                      Justify="Justify.Center"
                      AlignItems="AlignItems.Center"
                      Style="padding-top: 10%;">
                <Login SignIn="@SignIn" LoginMessage="@LoginMessage" MudAnimate="@mudAnimate" />
            </MudStack>
        }
        else
        {
            <MudPaper Style="background-color: rgba(255,193,173,0.4)">
                <UserTable />
            </MudPaper>
            <MudPaper Style="background-color: rgba(255,193,173,0.4)">
                <Planner />
            </MudPaper>
        }
    }
</MudContainer>
@code {

    MudAnimate mudAnimate;

    private Tuple<bool, string> LoginMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadStateAsync();
        if (!CheckIfAdmin())
        {
            SignOut();
        }
        else
        {
            StateHasChanged();
        }
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (CustomAuthState.CurrentUserEntity.UserName == null)
        {
            CustomAuthState.CurrentUserEntity.UserName = string.Empty;
            StateHasChanged();
        }
        return Task.FromResult(true);
    }

    private async Task LoadStateAsync()
    {
        CustomAuthState.CurrentUserClaims = new ClaimsPrincipal();
        CustomAuthState.CurrentUserEntity = new WeddingAppDTO.DataTransferObject.User { UserName = null, UserPhone = null };
        await ((CustomAuthStateProviderController)AuthenticationStateProvider).GetCurrentUserAsync();
        await ((CustomAuthStateProviderController)AuthenticationStateProvider).GetAuthenticationStateAsync();
    }

    private async void SignOut()
    {
        await ((CustomAuthStateProviderController)AuthenticationStateProvider).SignOut();
        StateHasChanged();

    }
    private async void SignIn(User userEntityModel)
    {
        LoginMessage = await ((CustomAuthStateProviderController)AuthenticationStateProvider)
            .AuthenticateUser(userEntityModel.UserName, userEntityModel.UserPhone);
        if (!CheckIfAdmin())
        {
            LoginMessage = new Tuple<bool, string>(LoginMessage.Item1, "User is not admin!");
            SignOut();
        }
        else
        {
            StateHasChanged();
        }
    }

    private bool CheckIfAdmin()
    {
        if (CustomAuthState.CurrentUserClaims.Claims
            .Where(x => x.Type == ClaimTypes.Role)
            .Select(x => x.Value)
            .FirstOrDefault() == "Admin")
        {
            return true;
        }
        else
        {
            return false;
        }
    }

}
